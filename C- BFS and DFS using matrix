#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

struct queue{
	int *arr;
	int front;
	int rear;
	int size;
	int capacity;	
};


struct queue* createQueue(int capacity){
	struct queue* q = (struct queue*)malloc(sizeof(struct queue));
	q->arr = (int*)malloc(sizeof(int)*capacity);
	q->capacity=capacity;
	q->size=0;
	q->front=0;
	q->rear=-1;
	return q;
}

void enqueue(struct queue* q,int x){
	if(q->size==q->capacity){
		printf("queue overflow\n");
		return;
	}
	q->size++;
	q->arr[++q->rear]=x;
}

int dequeue(struct queue* q){
	if(q->size==0){
		printf("queue underflow\n");
		return -1;
	}
	q->size--;
	return q->arr[q->front++];
}

void BFS(int start,int n,int visited[n],int graph[][n]){
	struct queue* q = createQueue(n);
	printf("%d ",start);
	enqueue(q,start);
	visited[start]=1;
	while(q->size!=0){
	    int curr_vertex = dequeue(q);
	    for(int i=0;i<n;i++){
	        if(graph[curr_vertex][i]==1 && visited[i]!=1){
	            printf("%d ",i);
	            enqueue(q,i);
	            visited[i]=1;
	        }
	    }
	}
}

int DFS_TIME = 0;
void DFS(int start, int n, int visited[], int graph[][n]) {
    printf("%d ", start);
    visited[start] = 1;
    DFS_TIME++;
    for (int i = 0; i < n; i++) {
        if (graph[start][i] == 1 && visited[i] == 0) {
            DFS(i, n, visited, graph);
            DFS_TIME++;
        }
    }
}


void createGraph(int n,int graph[][n]){
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			char choice;
			printf("do you want an edge from %d to %d (y/n)\n",i,j);
			scanf(" %c",&choice); //dont froget to add space
			if(choice=='y'){
				graph[i][j]=1;
			}else{
				graph[i][j]=0;
			}
		}
	}

	printf("The adjecency matrix is\n");

	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			printf("%d ",graph[i][j]);
		}
		printf("\n");
	}

}

int main(){
	int n;
	printf("Enter the no of vertex\n");
	scanf("%d",&n);
	int visited[n];
	int graph[n][n];
	for(int i=0;i<n;i++){
		visited[i]=0;
	}
    createGraph(n,graph);
    int start;
	printf("Enter the starting vertex\n");
	scanf("%d",&start);
	printf("BFS:\n");
    BFS(start,n,visited,graph);
	for(int i=0;i<n;i++){
		visited[i]=0;
	}
	printf("\n");
	printf("DFS:\n");
	DFS(start,n,visited,graph);
	printf("\nTime taken is %d:",DFS_TIME);
	return 0;
}

